module Paint.Bill where

import Paint.Account
import Daml.Script
import Paint.PaintData

template FinalBill
  with
    bill : Bill
  where
    signatory bill.customer, bill.bank
    observer bill.worker
    ensure bill.cash > 0.0

    choice TransferMoney : ContractId FinalBill
      controller bill.bank, bill.customer
      do
        create this with bill = (billTransfered bill)

template BillProposal
  with
    bill : Bill
    customerApproved : Bool
    workerApproved : Bool
    bankApproved : Bool
  where
    signatory bill.customer
    observer bill.worker, bill.bank

    key (bill.customer, bill.worker, bill.bank) : (Party, Party, Party)
    maintainer key._1

    ensure bill.cash > 0.0

    nonconsuming choice BankPreApprove : ContractId Account
      controller bill.bank
      do
        (accountCid, account) <- fetchByKey @Account bill.bank
        exercise accountCid TransferProposal
          with
            receiver = [bill.worker]
            payer = [bill.customer]

    choice ApproveStep : ContractId BillProposal
      with
        user : Party
        accountCid : ContractId Account
      controller if (user == bill.customer) then bill.customer else bill.worker
      do
        (accountCid, account) <- fetchByKey @Account user
        if (user == bill.customer) 
          then assertMsg
            "customer does not has enough money pay the bill"
            (account.balance >= bill.cash)
          else assertMsg "" (bill.cash > 0.0)
        exercise accountCid TransferProposal
          with
            receiver = if (user == bill.customer) 
              then bill.bank :: account.receivers
              else account.receivers
            payer = if (user == bill.customer)
              then account.payers
              else bill.bank :: account.payers
        if (user == bill.customer)
          then do
            create this with customerApproved = True
          else do
            create this with workerApproved = True

    choice BankApprove : ContractId BillProposal
      controller bill.bank
      do
        assertMsg "customer not approved" (customerApproved)
        assertMsg "worker not approved" (workerApproved)
        create this with bankApproved = True

    choice CreateBill : ContractId FinalBill
      controller bill.bank
      do
        assertMsg "customer not approved" (customerApproved)
        assertMsg "worker not approved" (workerApproved)
        assertMsg "bank not approved" (bankApproved)
        -- transfer customer's money to bank's account
        bankAccountCid <- exerciseByKey @Account bill.bank
          TransferIncome with money = bill.cash
        exercise bankAccountCid TransferPay
          with money = bill.cash
        createAndExercise
          FinalBill with bill
          TransferMoney

test_bill : Script ()
test_bill = script do
  accounts <- allocateAccounts ["UN Bank", "Alice", "Bob"] 1000.0
  let
    all@[
          (bank, bankAccountCid),
          (alice, aliceAccountCid),
          (bob, bobAccountCid)
        ] = map (identity) accounts
    bill = Bill
          with
            customer = alice
            worker = bob
            bank
            cash = 750.0
            transfer = False
  -- customer create a bill proposal
  billProposalCid <- submit alice do
    createCmd BillProposal with 
      bill
      customerApproved = False
      workerApproved = False
      bankApproved = False
  -- bank pre-approve the bill
  bankAccountCid <- submit bank do
    exerciseCmd billProposalCid BankPreApprove
  -- worker approve the bill
  billProposalCid <- submit bob do 
    exerciseCmd billProposalCid ApproveStep
      with accountCid = bankAccountCid, user = bob
  -- customer approve the bill
  billProposalCid <- submit alice do 
    exerciseCmd billProposalCid ApproveStep
      with accountCid = bankAccountCid, user = alice
  -- bank approve the bill
  billProposalCid <- submit bank do 
    exerciseCmd billProposalCid BankApprove
  -- bank create a bill and transfer the money
  submit bank do
    exerciseCmd billProposalCid CreateBill
  pure()
