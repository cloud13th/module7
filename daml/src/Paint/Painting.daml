module Paint.Painting where

import Daml.Script
import Paint.Bill
import Paint.Account
import Paint.PaintData

template PaintingProposal
  with
    owner : Party
  where
    signatory owner

    choice InitPaintingTask : (ContractId Painting, ContractId BillProposal)
      with
        intermediary : Party
        worker : Party
        salary : Decimal
      controller owner
      do
        billProposalCid <- create BillProposal 
          with
            bill = initBill owner worker intermediary salary
            customerApproved = False
            workerApproved = False
            bankApproved = False
        paintingCid <- create Painting
          with
            task = initPaint owner intermediary worker salary
        pure (paintingCid, billProposalCid)

template Painting
  with
    task : Paint
  where
    signatory task.housekeeper
    observer task.intermediary, task.worker

    nonconsuming choice IntermediaryConfirm
      : ContractId Account
      with
        billProposalCid : ContractId BillProposal
      controller task.intermediary
      do
        exercise billProposalCid BankPreApprove

    choice Start : ContractId Painting
      with
        intermediaryAccountCid : ContractId Account
      controller task.worker
      do
        exerciseByKey
          @BillProposal
          (task.housekeeper, task.worker, task.intermediary)
          ApproveStep
            with
              accountCid = intermediaryAccountCid
              user = task.worker
        create this with task.status = P_START

    choice Progress : ContractId Painting
      controller task.worker
      do 
        create this with task.status = P_PROGRESS

    choice Finished : ContractId Painting
      controller task.worker
      do 
        create this with task.status = P_FINISHED

    choice PayMoneyRequest : ContractId Painting
      with
        intermediaryAccountCid : ContractId Account
      controller task.housekeeper
      do
        exerciseByKey
          @BillProposal
          (task.housekeeper, task.worker, task.intermediary)
          ApproveStep
            with
              accountCid = intermediaryAccountCid
              user = task.housekeeper
        -- update painting status
        create this with task.status = P_PAYED

    choice MoneyTransfer : ()
      controller task.intermediary
      do
        -- intermediary approved
        billProposalCid <- exerciseByKey
          @BillProposal
          (task.housekeeper, task.worker, task.intermediary)
            BankApprove
        exercise billProposalCid CreateBill
        pure()

test_painting : Script ()
test_painting = script do
  bank <- allocateParty "UN Bank"
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  -- allocate accounts for them
  accounts <- mapA
    (\party -> submit party do
      createCmd Account with owner = party, balance = 10000.0, receivers = [], payers = [])
    [bank, alice, bob]
  (paintingCid, billProposalCid) <- submit alice do
    createAndExerciseCmd
      PaintingProposal with owner = alice
      InitPaintingTask with intermediary = bank, worker = bob, salary = 450.0
  bankAccountCid <- submit bank do
    exerciseCmd paintingCid IntermediaryConfirm
      with billProposalCid
  startCid <- submit bob do
    exerciseCmd paintingCid Start
      with intermediaryAccountCid = bankAccountCid
  progressCid <- submit bob do exerciseCmd startCid Progress
  finishedCid <- submit bob do exerciseCmd progressCid Finished
  -- housekeeper create a request to pay money
  payMoneyRequestCid <- submit alice do
    exerciseCmd finishedCid PayMoneyRequest 
      with intermediaryAccountCid = bankAccountCid
  -- the intermediary execute paying progress
  submit bank do
    exerciseCmd payMoneyRequestCid MoneyTransfer
  pure()
